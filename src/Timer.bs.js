// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Utils$ReactHooksTemplate = require("./Utils.bs.js");
var Button$ReactHooksTemplate = require("./Button.bs.js");

var styleDiv = {
  border: "1px solid black",
  maxWidth: "180px",
  textAlign: "center",
  borderRadius: "8px"
};

var styleP = {
  color: "#444444",
  fontSize: "42px",
  margin: "16px 0"
};

function Timer(Props) {
  var match = React.useReducer((function (state, action) {
          switch (action) {
            case 0 : 
                return /* record */[
                        /* seconds */state[/* seconds */0],
                        /* isTicking */true
                      ];
            case 1 : 
                return /* record */[
                        /* seconds */state[/* seconds */0],
                        /* isTicking */false
                      ];
            case 2 : 
                return /* record */[
                        /* seconds */30,
                        /* isTicking */state[/* isTicking */1]
                      ];
            case 3 : 
                if (state[/* isTicking */1] && state[/* seconds */0] > 0) {
                  return /* record */[
                          /* seconds */state[/* seconds */0] - 1 | 0,
                          /* isTicking */state[/* isTicking */1]
                        ];
                } else {
                  return /* record */[
                          /* seconds */state[/* seconds */0],
                          /* isTicking */false
                        ];
                }
            
          }
        }), /* record */[
        /* seconds */30,
        /* isTicking */false
      ]);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          var timerId = setInterval((function (param) {
                  return Curry._1(dispatch, /* Tick */3);
                }), 1000);
          return (function (param) {
                    clearInterval(timerId);
                    return /* () */0;
                  });
        }));
  var match$1 = state[/* isTicking */1];
  return React.createElement("div", {
              style: styleDiv
            }, React.createElement("p", {
                  style: styleP
                }, Utils$ReactHooksTemplate.formatTime(state[/* seconds */0])), React.createElement("div", undefined, match$1 ? React.createElement(Button$ReactHooksTemplate.make, {
                        label: "Stop",
                        onClick: (function (_event) {
                            return Curry._1(dispatch, /* Stop */1);
                          })
                      }) : React.createElement(React.Fragment, undefined, React.createElement(Button$ReactHooksTemplate.make, {
                            label: "Start",
                            onClick: (function (_event) {
                                return Curry._1(dispatch, /* Start */0);
                              })
                          }), React.createElement(Button$ReactHooksTemplate.make, {
                            label: "Reset",
                            onClick: (function (_event) {
                                return Curry._1(dispatch, /* Reset */2);
                              })
                          }))));
}

var make = Timer;

exports.styleDiv = styleDiv;
exports.styleP = styleP;
exports.make = make;
/* react Not a pure module */
